# GitHub Actions workflow: auto-tag, build, and publish release

# Automatically bumps semantic version on merged PR to main, updates Cargo.toml,
# creates GitHub release, and publishes to crates.io

name: Auto Tag, Build, and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libdbus-1-dev \
            pkg-config \
            build-essential \
            libudev-dev \
            libx11-dev \
            libxtst-dev \
            libxkbcommon-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Determine version bump
        id: version_bump
        run: |
          # Check commit messages since last tag for version bump type
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" || git log --pretty=format:"%s")
          
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          # Determine bump type based on commit messages
          if echo "$COMMITS" | grep -i "breaking\|major" > /dev/null; then
            BUMP="major"
          elif echo "$COMMITS" | grep -i "feat\|feature\|minor" > /dev/null; then
            BUMP="minor"
          else
            BUMP="patch"
          fi
          
          echo "Version bump type: $BUMP"
          echo "bump_type=$BUMP" >> $GITHUB_OUTPUT

      - name: Get current version and calculate new version
        id: version
        run: |
          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*= "\(.*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse semantic version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump version based on type
          case "${{ steps.version_bump.outputs.bump_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Cargo.toml version
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.new_version }}"/' Cargo.toml
          echo "Updated Cargo.toml to version ${{ steps.version.outputs.new_version }}"

      - name: Update Cargo.lock
        run: cargo update -p media-controller --precise ${{ steps.version.outputs.new_version }}

      - name: Build and test
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings
          cargo test
          cargo build --release

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml Cargo.lock
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}" || echo "No changes to commit"

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.tag_name }}
          git push origin ${{ steps.version.outputs.tag_name }}
          git push origin main

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## Changes in ${{ steps.version.outputs.tag_name }}
            
            ### Features and Improvements
            This release includes the latest changes merged to main.
            
            ### Installation
            
            ```bash
            # Install from crates.io
            cargo install media-controller
            
            # Or download binary from GitHub releases
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag_name }}/media-controller -o media-controller
            chmod +x media-controller
            ```
            
            ### Usage
            
            ```bash
            MEDIA_CONTROL_API_TOKEN="your-secret" media-controller
            ```
          draft: false
          prerelease: false

      - name: Upload release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/media-controller
          asset_name: media-controller
          asset_content_type: application/octet-stream

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "Publishing version ${{ steps.version.outputs.new_version }} to crates.io"
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}